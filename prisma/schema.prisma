// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Player {
  id          String  @id @unique @default(cuid())
  displayName String
  twitchName  String  @unique
  pronouns    String
  country     String
  teams       Team[]  @relation("TeamPlayers")
  matches     Match[] @relation("MatchPlayers")
}

model Team {
  id      String   @id @unique @default(cuid())
  name    String
  players Player[] @relation("TeamPlayers")
  matches Match[]  @relation("MatchTeams")
}

model Event {
  id            String  @id @unique @default(cuid())
  name          String
  matches       Match[]
  matchEstimate String
}

model Match {
  id          String      @id @unique @default(cuid())
  status      Status
  players     Player[]    @relation("MatchPlayers")
  teams       Team[]      @relation("MatchTeams")
  time        DateTime
  gameTwitch  String
  aspectRatio AspectRatio
  restreamer  User        @relation(fields: [userId], references: [id])
  event       Event       @relation(fields: [eventId], references: [id])

  userId  String
  eventId String
}

enum AspectRatio {
  SIXTEENNINE
  FOURTHREE
}

enum Status {
  UPCOMING
  ARCHIVED
  CANCELLED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  restreams     Match[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
